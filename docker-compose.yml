version: '3.1'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: your_database
      MYSQL_USER: your_username
      MYSQL_PASSWORD: your_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: mongodb_container
    environment:
      MONGO_INITDB_ROOT_USERNAME: your_username
      MONGO_INITDB_ROOT_PASSWORD: your_password
      MONGO_INITDB_DATABASE: your_database
    ports:
      - "27020:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  redis:
    image: redis:latest
    container_name: redis_container
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  user-query-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/user-query-service/target/user-query-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8093:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  authentication-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/authentication-service/target/authentication-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8081:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  authorization-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/authorization-service/target/authorization-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8082:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  config-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/config-service/target/config-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8083:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  discovery-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/discovery-service/target/discovery-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8761:8761"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  file-storage-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/file-storage-service/target/file-storage-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8085:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  gateway-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/gateway-service/target/gateway-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8080:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  inventory-command-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/inventory-command-service/target/inventory-command-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8087:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  inventory-query-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/inventory-query-service/target/inventory-query-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8088:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/notification-service/target/notification-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8089:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  order-command-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/order-command-service/target/order-command-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8090:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  order-query-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/order-query-service/target/order-query-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8091:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

  user-command-service:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "-jar", "/app/user-command-service/target/user-command-service-0.0.1-SNAPSHOT.jar" ]
    ports:
      - "8095:8080"
    networks:
      - springboot-mongo-network
    restart: unless-stopped

networks:
  springboot-mongo-network:
    driver: bridge

volumes:
  mysql_data:
  mongo_data:
  redis_data:
